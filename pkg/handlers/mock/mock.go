// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockIHandlers is a mock of IHandlers interface.
type MockIHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlersMockRecorder
}

// MockIHandlersMockRecorder is the mock recorder for MockIHandlers.
type MockIHandlersMockRecorder struct {
	mock *MockIHandlers
}

// NewMockIHandlers creates a new mock instance.
func NewMockIHandlers(ctrl *gomock.Controller) *MockIHandlers {
	mock := &MockIHandlers{ctrl: ctrl}
	mock.recorder = &MockIHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandlers) EXPECT() *MockIHandlersMockRecorder {
	return m.recorder
}

// ApiGiveAppTokens mocks base method.
func (m *MockIHandlers) ApiGiveAppTokens(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiGiveAppTokens", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiGiveAppTokens indicates an expected call of ApiGiveAppTokens.
func (mr *MockIHandlersMockRecorder) ApiGiveAppTokens(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiGiveAppTokens", reflect.TypeOf((*MockIHandlers)(nil).ApiGiveAppTokens), c)
}

// ApiSaveAppTokens mocks base method.
func (m *MockIHandlers) ApiSaveAppTokens(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiSaveAppTokens", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiSaveAppTokens indicates an expected call of ApiSaveAppTokens.
func (mr *MockIHandlersMockRecorder) ApiSaveAppTokens(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiSaveAppTokens", reflect.TypeOf((*MockIHandlers)(nil).ApiSaveAppTokens), c)
}

// AuthRefresh mocks base method.
func (m *MockIHandlers) AuthRefresh(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthRefresh", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthRefresh indicates an expected call of AuthRefresh.
func (mr *MockIHandlersMockRecorder) AuthRefresh(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthRefresh", reflect.TypeOf((*MockIHandlers)(nil).AuthRefresh), c)
}

// AuthSignIn mocks base method.
func (m *MockIHandlers) AuthSignIn(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSignIn", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthSignIn indicates an expected call of AuthSignIn.
func (mr *MockIHandlersMockRecorder) AuthSignIn(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSignIn", reflect.TypeOf((*MockIHandlers)(nil).AuthSignIn), c)
}

// AuthSignOut mocks base method.
func (m *MockIHandlers) AuthSignOut(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSignOut", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthSignOut indicates an expected call of AuthSignOut.
func (mr *MockIHandlersMockRecorder) AuthSignOut(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSignOut", reflect.TypeOf((*MockIHandlers)(nil).AuthSignOut), c)
}

// AuthSignUp mocks base method.
func (m *MockIHandlers) AuthSignUp(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSignUp", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthSignUp indicates an expected call of AuthSignUp.
func (mr *MockIHandlersMockRecorder) AuthSignUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSignUp", reflect.TypeOf((*MockIHandlers)(nil).AuthSignUp), c)
}
