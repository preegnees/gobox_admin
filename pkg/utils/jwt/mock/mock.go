// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	jwt "jwt/pkg/utils/jwt"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIJWT is a mock of IJWT interface.
type MockIJWT struct {
	ctrl     *gomock.Controller
	recorder *MockIJWTMockRecorder
}

// MockIJWTMockRecorder is the mock recorder for MockIJWT.
type MockIJWTMockRecorder struct {
	mock *MockIJWT
}

// NewMockIJWT creates a new mock instance.
func NewMockIJWT(ctrl *gomock.Controller) *MockIJWT {
	mock := &MockIJWT{ctrl: ctrl}
	mock.recorder = &MockIJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJWT) EXPECT() *MockIJWTMockRecorder {
	return m.recorder
}

// CheckJwt mocks base method.
func (m *MockIJWT) CheckJwt(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckJwt", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckJwt indicates an expected call of CheckJwt.
func (mr *MockIJWTMockRecorder) CheckJwt(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckJwt", reflect.TypeOf((*MockIJWT)(nil).CheckJwt), token)
}

// GenerateJWT mocks base method.
func (m *MockIJWT) GenerateJWT(username, audience string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", username, audience)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockIJWTMockRecorder) GenerateJWT(username, audience interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockIJWT)(nil).GenerateJWT), username, audience)
}

// GetValuesFromJWT mocks base method.
func (m *MockIJWT) GetValuesFromJWT(token string) (*jwt.MyCustomClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesFromJWT", token)
	ret0, _ := ret[0].(*jwt.MyCustomClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesFromJWT indicates an expected call of GetValuesFromJWT.
func (mr *MockIJWTMockRecorder) GetValuesFromJWT(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesFromJWT", reflect.TypeOf((*MockIJWT)(nil).GetValuesFromJWT), token)
}
