// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "jwt/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetAppData mocks base method.
func (m *MockIService) GetAppData(username string) ([]models.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppData", username)
	ret0, _ := ret[0].([]models.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppData indicates an expected call of GetAppData.
func (mr *MockIServiceMockRecorder) GetAppData(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppData", reflect.TypeOf((*MockIService)(nil).GetAppData), username)
}

// Refresh mocks base method.
func (m *MockIService) Refresh(refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockIServiceMockRecorder) Refresh(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockIService)(nil).Refresh), refreshToken)
}

// SaveAppData mocks base method.
func (m *MockIService) SaveAppData(useraname string, appData []models.Tokens) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAppData", useraname, appData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAppData indicates an expected call of SaveAppData.
func (mr *MockIServiceMockRecorder) SaveAppData(useraname, appData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAppData", reflect.TypeOf((*MockIService)(nil).SaveAppData), useraname, appData)
}

// SignIn mocks base method.
func (m *MockIService) SignIn(arg0 models.SignIn) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIServiceMockRecorder) SignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIService)(nil).SignIn), arg0)
}

// SignOut mocks base method.
func (m *MockIService) SignOut(refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignOut indicates an expected call of SignOut.
func (mr *MockIServiceMockRecorder) SignOut(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockIService)(nil).SignOut), refreshToken)
}

// SignUp mocks base method.
func (m *MockIService) SignUp(arg0 models.SignUp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIServiceMockRecorder) SignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIService)(nil).SignUp), arg0)
}
