// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewSignRefreshParams creates a new SignRefreshParams object
//
// There are no default values defined in the spec.
func NewSignRefreshParams() SignRefreshParams {

	return SignRefreshParams{}
}

// SignRefreshParams contains all the bound params for the sign refresh operation
// typically these are obtained from a http.Request
//
// swagger:parameters sign_refresh
type SignRefreshParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Уникальный отпечаток в x-request-id
	  Required: true
	  In: header
	*/
	Fingerprint string
	/*Токен обновления
	  Required: true
	  In: header
	*/
	RefreshToken string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSignRefreshParams() beforehand.
func (o *SignRefreshParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindFingerprint(r.Header[http.CanonicalHeaderKey("fingerprint")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindRefreshToken(r.Header[http.CanonicalHeaderKey("refreshToken")], true, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFingerprint binds and validates parameter Fingerprint from header.
func (o *SignRefreshParams) bindFingerprint(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("fingerprint", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("fingerprint", "header", raw); err != nil {
		return err
	}
	o.Fingerprint = raw

	return nil
}

// bindRefreshToken binds and validates parameter RefreshToken from header.
func (o *SignRefreshParams) bindRefreshToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("refreshToken", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("refreshToken", "header", raw); err != nil {
		return err
	}
	o.RefreshToken = raw

	return nil
}
